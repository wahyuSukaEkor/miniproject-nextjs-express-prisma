// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  password      String
  referral_code String?       @unique
  isAdmin       Boolean
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  point         Point?
  Event         Event[]
  Review        Review[]
  Transaction   Transaction[]
  Voucher       Voucher[]

  @@map("users")
}

model Point {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  total_point  Int
  expired_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("points")
}

model Event {
  event_id        Int      @id @default(autoincrement())
  user_id         Int
  user            User     @relation(fields: [user_id], references: [user_id])
  event_name      String
  price           Decimal
  description     String
  start_date      DateTime
  end_date        DateTime
  available_seats Int
  max_capacity    Int
  buy_limit       Int
  category_id     Int
  category        EventCategory @relation(fields: [category_id], references: [id])
  location_id     Int
  location        Location      @relation(fields: [location_id], references: [id])
  thumbnails_path String
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  Review          Review[]
  Transaction     Transaction[]
  Voucher         Voucher[]

  @@map("events")
}

model Location {
  id    Int     @id @default(autoincrement())
  name  String
  Event Event[]

  @@map("locations")
}

model EventCategory {
  id            Int     @id @default(autoincrement())
  category_name String
  Event         Event[]

  @@map("categories")
}

model Review {
  id         Int      @id @default(autoincrement())
  event_id   Int
  event      Event    @relation(fields: [event_id], references: [event_id])
  user_id    Int
  user       User     @relation(fields: [user_id], references: [user_id])
  rating     Int
  comment    String?  @db.Text
  created_at DateTime @default(now())

  @@map("reviews")
}

model Transaction {
  transaction_id   Int           @id @default(autoincrement())
  user_id          Int
  user             User          @relation(fields: [user_id], references: [user_id])
  event_id         Int
  event            Event         @relation(fields: [event_id], references: [event_id])
  payment_status   PaymentStatus
  base_price       Int
  quantity         Int
  total_price      Int
  discounted_price Int?
  point_used       Int?
  voucer_id        Int?
  voucer           Voucher?      @relation(fields: [voucer_id], references: [voucer_id])
  payment_path     String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("transactions")
}

enum PaymentStatus {
  waiting
  paid
  success
  failed
}

model Voucher {
  voucer_id    Int           @id @default(autoincrement())
  name         String
  discount     Int
  expired_date DateTime?
  max_usage    Int
  usage        Int           @default(0)
  event_id     Int?
  event        Event?        @relation(fields: [event_id], references: [event_id])
  user_id      Int?
  user         User?         @relation(fields: [user_id], references: [user_id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  Transaction  Transaction[]

  @@map("vouchers")
}
