// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  referralCode String?       @unique
  isAdmin      Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  point        Point?
  events       Event[]
  Review       Review[]
  vouchers     Voucher[]
  transactions Transaction[]
  referrals    Referral[]    @relation("Referrer")
  referredBy   Referral[]    @relation("Referred")
}



model Location {
  id    Int     @id @default(autoincrement())
  name  String
  event Event[]
}

model EventCategory {
  id            Int     @id @default(autoincrement())
  category_name String
  Event         Event[]
}

model Event {
  event_id        Int              @id @default(autoincrement())
  organizer_id    Int
  organizer       User   @relation(fields: [organizer_id], references: [user_id])
  event_name      String
  price           Decimal
  date            DateTime
  category_id     Int
  category        EventCategory    @relation(fields: [category_id], references: [id])
  location_id     Int
  location        Location         @relation(fields: [location_id], references: [id])
  EventStatistic  EventStatistic[]
  description     String
  available_seat  Int
  ticket_types    String
  thumbnails_path String
  Review          Review[]
  Transaction     Transaction[]
  Voucher         Voucher[]
}

model EventStatistic {
  id            Int     @id @default(autoincrement())
  event_id      Int
  event         Event   @relation(fields: [event_id], references: [event_id])
  ticket_sold   Int
  total_revenue Decimal
}

model Referral {
  id          Int         @id @default(autoincrement())
  referrer_id Int
  referrer    User        @relation("Referrer", fields: [referrer_id], references: [user_id])
  referred_id Int
  referred    User        @relation("Referred", fields: [referred_id], references: [user_id])
  created_at  DateTime    @default(now())
  expires_at  DateTime
}

model Review {
  id             Int         @id @default(autoincrement())
  event_id       Int
  event          Event       @relation(fields: [event_id], references: [event_id])
  user_id Int
  user    User  @relation(fields: [user_id], references: [user_id])
  rating         Int
  comment        String?     @db.Text
  created_at     DateTime    @default(now())
}

model Transaction {
  transaction_id      Int             @id @default(autoincrement())
  user_id      Int
  user         User     @relation(fields: [user_id], references: [user_id])
  event_id            Int
  event               Event           @relation(fields: [event_id], references: [event_id])
  purchase_date       DateTime        @default(now())
  base_price          Decimal
  discount_used       Decimal?
  point_used          Int?
  final_price         Decimal
  payment_path        String?
}

model Voucher {
  id             Int             @id @default(autoincrement())
  name           String
  discount       Int
  expiry_date    DateTime?
  max_usage      Int
  usage          Int             @default(0)
  event_id       Int?
  event          Event?          @relation(fields: [event_id], references: [event_id])
  user_id        Int?
  user           User?           @relation(fields: [user_id], references: [user_id])
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model Point {
  id         Int      @id @default(autoincrement())
  balance    Int
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

}
